# terminal
[[plugins]]
repo = 'Shougo/ddt.vim'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/ddt.lua'

[[plugins]]
repo = 'Shougo/ddt-ui-terminal'

[[plugins]]
repo = 'Shougo/ddt-ui-shell'

## open new tabpage instead of start nested instance
[[plugins]]
repo = 'lambdalisue/guise.vim'
hook_add = "let g:guise#disable_vim = 1"

[[plugins]]
repo = 'Joakker/lua-json5'
extAttrs = { installerBuild = './install.sh' }

# startup
[[plugins]]
repo = 'mhinz/vim-startify'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/startify.lua'

# Preview
[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown', 'rst', 'textile']

# nonsense animation
[[plugins]]
repo = 'eandrju/cellular-automaton.nvim'
on_cmd = 'CellularAutomaton'
lua_add = """
vim.keymap.set('n', '<Leader>mr', '<Cmd>CellularAutomaton make_it_rain<CR>')
vim.keymap.set('n', '<Leader>ml', '<Cmd>CellularAutomaton game_of_life<CR>')
"""

[[plugins]]
repo = 'epwalsh/obsidian.nvim'
depends = 'plenary.nvim'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/obsidian.lua'

[[plugins]]
repo = 'MeanderingProgrammer/render-markdown.nvim'
on_ft = 'markdown'
lua_source = """
require('render-markdown').setup({
  checkbox = {
    checked = { icon = "" },
    custom = {
      cancel = { raw = '[~]', rendered = "󰰱" , highlight ="RenderMarkdownError" },
      important = { raw = '[!]', rendered = "", highlight = "RenderMarkdownWarn" },
      working = { raw = '[>]', rendered = "", highlight = "RenderMarkdownHint" }
    }
  },
  link = {
    web = { pattern = '^http[s]?://', icon = '󰖟 ', highlight = 'RenderMarkdownLink' },
  }
})
"""

# Submode
[[plugins]]
repo = 'kana/vim-submode'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/submode.lua'

# task runner
[[plugins]]
repo = 'Shougo/vimproc.vim'
extAttrs = { installerBuild = 'make' }

[[plugins]]
repo = 'thinca/vim-quickrun'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/quickrun.lua'

# quickfix
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = 'qf'

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
on_ft = 'qf'

# diagnostics
[[plugins]]
repo = 'folke/todo-comments.nvim'
lua_add = "vim.keymap.set('n', '<Leader>td', '<Cmd>TodoQuickFix<CR>')"
lua_source = """
require('todo-comments').setup({})
"""

[[plugins]]
repo = 'folke/which-key.nvim'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/which-key.lua'

# popup notification
[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_source = """
vim.notify = require('notify')
"""


[[plugins]]
repo = 'ibhagwan/fzf-lua'
depends = ['nvim-web-devicons']
lua_source = """
local fzf_lua = require('fzf-lua')
fzf_lua.setup({'fzf-vim'})
fzf_lua.register_ui_select()
"""

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

# Grammar check
[[plugins]]
repo = 'rhysd/vim-grammarous'

# Ghosttext
[[plugins]]
repo = 'gamoutatsumi/dps-ghosttext.vim'
depends = ['denops.vim']

[[plugins]]
repo = 'glacambre/firenvim'
hook_post_update = 'call firenvim#install(0)'
lua_add = """
if vim.g.started_by_firenvim then
    vim.opt.laststatus = 0
end
"""

# LLM
[[plugins]]
repo = 'github/copilot.vim'
on_if = "get(g:, 'use_copilot', v:false)"
hooks_file = '$STD_CONFIG/lua/xecua/plugins/copilot.lua'

# ## integration
[[plugins]]
repo = 'yetone/avante.nvim'
# mergeするとダメらしい
merged = false
hooks_file = '$STD_CONFIG/lua/xecua/plugins/avante.lua'
depends = ['plenary.nvim', 'nui.nvim', 'nvim-web-devicons']
extAttrs = { installerBuild = 'make' }

[[plugins]]
repo = 'yuucu/cursor_open.nvim'
on_if = "get(g:, 'use_cursor', v:false)"
lua_source = """
require('cursor_open').setup({})
"""

[[plugins]]
repo = 'ravitemer/mcphub.nvim'
depends = ['plenary.nvim', 'avante.nvim']
lua_source = """
require('mcphub').setup({})
"""

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

# Database client
[[plugins]]
repo = 'tpope/vim-dadbod'

[[plugins]]
repo = 'kristijanhusak/vim-dadbod-ui'
depends = ['vim-dadbod']
lua_add = """
vim.g.db_ui_show_database_icon = 1
vim.g.db_ui_use_nvim_notify = 1
vim.g.db_ui_auto_execute_table_helpers = 1
vim.g.db_ui_use_nerd_fonts = 1
vim.keymap.set("n", "<Leader>n", "<Cmd>DBUIToggle<CR>")
"""

# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
# fork. back to original when https://github.com/antosha417/nvim-lsp-file-operations/pull/34 is merged
repo = 'igorlfs/nvim-lsp-file-operations'
depends = ['nvim-lspconfig']
lua_post_source = """
require("lsp-file-operations").setup()
local lspconfig = require("lspconfig")
lspconfig.util.default_config = vim.tbl_extend("force", lspconfig.util.default_config, {
    capabilities = vim.tbl_deep_extend(
        "force",
        vim.lsp.protocol.make_client_capabilities(),
        require("lsp-file-operations").default_capabilities()
    ),
})

"""

## breadcrumbs
[[plugins]]
repo = 'SmiteshP/nvim-navic'

## Installer
[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = """
require("mason").setup({
    registries = {
        "lua:xecua.mason-registry",
        "github:mason-org/mason-registry",
    },
})
"""

[[plugins]]
repo = 'tamago324/nlsp-settings.nvim'
lua_source = """
require("nlspsettings").setup({
    nvim_notify = { enable = true },
})
"""

[[plugins]]
repo = 'mfussenegger/nvim-jdtls'
depends = ['nvim-dap']
on_lua = 'jdtls'

## DAP
[[plugins]]
repo = 'mfussenegger/nvim-dap'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/dap.lua'

[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
depends = ['nvim-dap', 'nvim-nio']

[[plugins]]
repo = 'nvim-neotest/nvim-nio'
on_lua = 'nio'

## tsserver integration
[[plugins]]
repo = 'pmizio/typescript-tools.nvim'
depends = ['plenary.nvim', 'nvim-lspconfig']
lua_source = """
require("typescript-tools").setup({
  single_file_support = false,
  init_options = {
      preferences = {
          includeCompletionsWithInsertText = false
      }
  }
})
"""

## efm-langserver presets
[[plugins]]
repo = 'creativenull/efmls-configs-nvim'

## Rust tooltip
[[plugins]]
repo = 'mrcjkb/rustaceanvim'
depends = ['mason.nvim']
lua_add = """
vim.g.rustaceanvim = function()
  local config = {
    -- signature helpもかってにfocus持ってっちゃうんだよなあ……
    -- tools = { hover_actions = { auto_focus = true } },
  }

  local registry = require('mason-registry')
  if registry.is_installed('codelldb') then
    local pkg_dir = registry.get_package('codelldb'):get_install_path()
    config.dap = {
      adapter = require('rustaceanvim.config').get_codelldb_adapter(
        pkg_dir .. '/extension/adapter/codelldb',
        pkg_dir .. '/extension/lldb/lib/liblldb.so'
      ),
    }
  end
  return config
end
"""

## Flutter integration
[[plugins]]
repo = 'akinsho/flutter-tools.nvim'
lua_source = """
require('flutter-tools').setup({})
"""

# Popup
[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = 'denops.vim'
hook_source = "call popup_preview#enable()"

[[plugins]]
repo = 'matsui54/denops-signature_help'
depends = 'denops.vim'
# lua_source = """
# vim.g.signature_help_config = {
#     contentsStyle = "currentLabel"
# }
# vim.fn["signature_help#enable"]()
# """

## SKK
[[plugins]]
repo = 'vim-skk/skkeleton'
depends = 'denops.vim'
group = 'ddc'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/skkeleton.lua'

[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
depends = ['skkeleton']
rev = 'v2'
lua_source = """
require('skkeleton_indicator').setup({
  eijiText = "a",
  hiraText = "あ",
  kataText = "ア",
  hankataText = "ｱ",
  zenkakuText = "Ａ"
})
"""

[[plugins]]
repo = 'skk-dev/dict'
merged = false

[[plugins]]
repo = 'uasi/skk-emoji-jisyo'
merged = false

# filer
[[plugins]]
repo = 'lambdalisue/vim-fern'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/fern.lua'

[[plugins]]
repo = 'lambdalisue/vim-glyph-palette'

[[plugins]]
repo = 'lambdalisue/vim-fern-hijack'

[[plugins]]
repo = 'TheLeoP/fern-renderer-web-devicons.nvim'

# for good appearance
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# git
[[plugins]]
repo = 'tpope/vim-fugitive'
lua_add = """
vim.keymap.set('n', '<Leader>gl', '<Cmd>Git log -p %<CR>')
vim.keymap.set('n', '<Leader>gs', '<Cmd>Git<CR>')
"""

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
lua_source = """
require('gitsigns').setup({
  signcolumn = false,
  numhl = true,
  current_line_blame = true,
  current_line_blame_formatter = "<author>, <author_time> (<author_time:%R>) - <summary>",
  current_line_blame_opts = {
      ignore_whitespace = true
  },
  on_attach = function()
    local gitsigns = require('gitsigns')

    vim.keymap.set('n', '<Leader>gb', gitsigns.blame, { buffer = true, desc = "Gitsigns: blame" })
    vim.keymap.set('n', '<Leader>gd', gitsigns.diffthis, { buffer = true, desc = "Gitsigns: diff" })
    vim.keymap.set('n', '<Leader>g[', function() gitsigns.nav_hunk('prev') end, { buffer = true, desc = "Gitsigns: jump to prev hunk" })
    vim.keymap.set('n', '<Leader>g]', function() gitsigns.nav_hunk('next') end, { buffer = true, desc = "Gitsigns: jump to next hunk" })
    vim.keymap.set('n', '<Leader>ga', gitsigns.stage_hunk, { buffer = true, desc = "Gitsigns: stage current hunk" })
    vim.keymap.set('v', '<Leader>ga', function() gitsigns.stage_hunk({vim.fn.line('.'), vim.fn.line('v')}) end, { buffer = true, desc = "Gitsigns: stage selected hunk" })
    vim.keymap.set('n', '<Leader>gA', gitsigns.stage_buffer, { buffer = true, desc = "Gitsigns: stage current buffer" })
    vim.keymap.set('n', '<Leader>gu', gitsigns.undo_stage_hunk, { buffer = true, desc = "Gitsigns: undo stage current hunk" })
    vim.keymap.set('n', '<Leader>gr', gitsigns.reset_hunk, { buffer = true, desc = "Gitsigns: reset current hunk" })
    vim.keymap.set('v', '<Leader>gr', function() gitsigns.reset_hunk({vim.fn.line('.'), vim.fn.line('v')}) end, { buffer = true, desc = "Gitsigns: reset selected hunk" })
    vim.keymap.set('n', '<Leader>gR', gitsigns.reset_buffer, { buffer = true, desc = "Gitsigns: reset current buffer" })
  end
})
"""

# autocomplete matching brace/quotation
[[plugins]]
repo = 'cohama/lexima.vim'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/lexima.lua'

# undo
[[plugins]]
repo = 'mbbill/undotree'
lua_add = """
vim.g.undotree_SetFocusWhenToggle = 1
vim.keymap.set('n', '<Leader>u', '<Cmd>UndotreeToggle<CR>')
"""

# statusline
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
depends = ['nvim-web-devicons', 'nvim-navic']
hooks_file = '$STD_CONFIG/lua/xecua/plugins/lualine.lua'

# mark
[[plugins]]
repo = 'vim-scripts/ShowMarks'
hook_add = "let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyz'"

# comment
[[plugins]]
repo = 'numToStr/Comment.nvim'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/comment.lua'

## jsx/tsx helper
[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'

# helpの日本語化
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# Open README.md
[[plugins]]
repo = '4513ECHO/vim-readme-viewer'
hook_add = "let g:readme_viewer#plugin_manager = 'dpp.vim'"

# ペースト時にpasteモードに
[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = """
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.php,*.ctp,*.jsx,*.tsx,*.vue,*.svelte,*.astro'
let g:closetag_filetypes = 'html,xhtml,phtml,php,javascriptreact,typescriptreact,vue,svelte,astro'
"""

# color scheme
[[plugins]]
repo = 'tomasr/molokai'
hook_add = "colorscheme molokai"

# snippets
[[plugins]]
repo = 'uga-rosa/denippet.vim'
lua_source = """
for _, snip in ipairs(vim.fn.globpath(vim.fs.joinpath(vim.fn.stdpath('config'), 'mysnippets'), '*.*', true, true)) do
    vim.fn['denippet#load'](snip)
end
for _, snip in ipairs(vim.fn.globpath(vim.fs.joinpath(vim.fn['dpp#get']('friendly-snippets').path, 'snippets'), '**/*.json', true, true)) do
    vim.fn['denippet#load'](snip)
end
"""

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
merged = false

[[plugins]]
repo = 'junegunn/vim-easy-align'
lua_add = "vim.keymap.set({ 'n', 'v' }, '<Leader>e', '<Plug>(LiveEasyAlign)')"

# Highlight under cursor
[[plugins]]
repo = 'RRethy/vim-illuminate'
lua_source = """
require('illuminate').configure({
  filetype_overrides = {
    toml = { providers = { 'regex' } },
  },
})
"""

# indentation
[[plugins]]
repo = 'lambdalisue/vim-backslash'
on_ft = 'vim'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'preservim/vim-indent-guides'

# markdown util
[[plugins]]
repo = 'mattn/vim-maketable'

# Syntax Highlighting
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_update = "TSUpdate"
hooks_file = '$STD_CONFIG/lua/xecua/plugins/treesitter.lua'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
lua_source = """
require('treesitter-context').setup({})
"""

## color matching parenthesis
[[plugins]]
repo = 'hiphish/rainbow-delimiters.nvim'

## fish
[[plugins]]
repo = 'dag/vim-fish'

## .gitignore file
[[plugins]]
repo = 'benknoble/gitignore-vim'
on_ft = 'gitignore'

## SATySFi
[[plugins]]
repo = 'qnighy/satysfi.vim'

## F#
[[plugins]]
repo = 'ionide/Ionide-vim'
on_ft = 'fsharp'

## Brewfile
[[plugins]]
repo = 'bfontaine/Brewfile.vim'
on_ft = 'Brewfile'

## ebuild etc
[[plugins]]
repo = 'gentoo/gentoo-syntax'

## CoPL Derivation Language
[[plugins]]
repo = 'ymyzk/vim-copl'

## CSV (Rainbow and SQL-like query)
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = 'csv'
hooks_file = '$STD_CONFIG/lua/xecua/plugins/rainbow_csv.lua'

## Firestore Security Rule
[[plugins]]
repo = 'delphinus/vim-firestore'
on_ft = 'firestore'

## skk-jisyo
[[plugins]]
repo = 'vim-skk/skkdict.vim'

## astro.build
[[plugins]]
repo = 'wuelnerdotexe/vim-astro'

[[plugins]]
repo = 'direnv/direnv.vim'

# Go utility
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = "let g:go_doc_keywordprg_enabled = 0"

# Haxe
[[plugins]]
repo = 'jdonaldson/vaxe'

# Swift
[[plugins]]
repo = 'keith/swift.vim'
on_ft = 'swift'

# Typst
[[plugins]]
repo = 'kaarmu/typst.vim'
on_ft = 'typst'

# Nix
[[plugins]]
repo = 'LnL7/vim-nix'
on_ft = 'nix'
