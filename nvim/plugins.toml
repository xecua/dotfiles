# plugin manager
[[plugins]]
repo = 'Shougo/dpp.vim'

[[plugins]]
repo = 'Shougo/dpp-ext-installer'

[[plugins]]
repo = 'Shougo/dpp-protocol-git'

[[plugins]]
repo = 'Shougo/dpp-ext-toml'

[[plugins]]
repo = 'Shougo/dpp-ext-lazy'

# terminal
[[plugins]]
repo = 'Shougo/deol.nvim'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/deol.lua'

## open new tabpage instead of start nested instance
[[plugins]]
repo = 'lambdalisue/guise.vim'
hook_add = """
let g:guise#disable_vim = 1
"""

# Utility
[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'folke/neodev.nvim'
lazy = true
on_lua = 'neodev'

# http client
[[plugins]]
repo = 'mistweaverco/kulala.nvim'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/kulala.lua'

# startup
[[plugins]]
repo = 'mhinz/vim-startify'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/startify.lua'

# Preview
[[plugins]]
repo = 'previm/previm'

# nonsense animation
[[plugins]]
repo = 'eandrju/cellular-automaton.nvim'
lua_add = """
vim.keymap.set('n', '<Leader>mr', '<Cmd>CellularAutomaton make_it_rain<CR>')
vim.keymap.set('n', '<Leader>ml', '<Cmd>CellularAutomaton game_of_life<CR>')
"""

[[plugins]]
repo = 'epwalsh/obsidian.nvim'
depends = ['plenary.nvim']
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/obsidian.lua'

[[plugins]]
repo = 'MeanderingProgrammer/render-markdown.nvim'
lazy = true
on_ft = ['markdown']
lua_post_source = """
require('render-markdown').setup({
  checkbox = {
    custom = {
      cancel = { raw = '[~]', rendered = "󰰱" , highlight ="RenderMarkdownError" },
      important = { raw = '[!]', rendered = "", highlight = "RenderMarkdownWarn" },
      working = { raw = '[>]', rendered = "", highlight = "RenderMarkdownHint" }
    }
  },
  link = {
    web = { pattern = '^http[s]?://', icon = '󰖟 ', highlight = 'RenderMarkdownLink' },
  }
})
"""

# Submode
[[plugins]]
repo = 'kana/vim-submode'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/submode.lua'

# task runner
[[plugins]]
repo = 'Shougo/vimproc.vim'
extAttrs = { installerBuild = 'make' }

[[plugins]]
repo = 'thinca/vim-quickrun'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/quickrun.lua'

# quickfix
[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
lazy = true
on_ft = ['qf']

# diagnostics
[[plugins]]
repo = 'folke/todo-comments.nvim'
lua_add = """
vim.keymap.set('n', '<Leader>td', '<Cmd>TodoQuickFix<CR>')
"""
lua_post_source = """
require('todo-comments').setup({})
"""

[[plugins]]
repo = 'folke/which-key.nvim'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/which-key.lua'

# popup notification
[[plugins]]
repo = 'rcarriga/nvim-notify'
lua_post_source = """
local notify = require('notify')
notify.setup({})
vim.notify = notify
"""

## dependency
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

# Grammar check
[[plugins]]
repo = 'rhysd/vim-grammarous'

# Ghosttext
[[plugins]]
repo = 'gamoutatsumi/dps-ghosttext.vim'

# Machine Learning-based completion
[[plugins]]
repo = 'github/copilot.vim'
on_if = "get(g:, 'use_copilot', v:false)"
lazy = true
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/copilot.lua'

[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
on_if = "get(g:, 'use_copilot', v:false)"
lazy = true

[[plugins]]
repo = 'codota/tabnine-nvim'
on_if = "get(g:, 'use_tabnine', v:false)"
lazy = true
extAttrs = { installerBuild = './dl_binaries.sh' }
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/tabnine.lua'

# Database client
[[plugins]]
repo = 'tpope/vim-dadbod'

[[plugins]]
repo = 'kristijanhusak/vim-dadbod-ui'
lua_add = """
vim.g.db_ui_show_database_icon = 1
vim.g.db_ui_use_nvim_notify = 1
vim.g.db_ui_auto_execute_table_helpers = 1
vim.g.db_ui_use_nerd_fonts = 1
vim.keymap.set("n", "<Leader>n", "<Cmd>DBUIToggle<CR>")
"""

# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/lspconfig.lua'

[[plugins]]
repo = 'SmiteshP/nvim-navic'
depends = ['nvim-lspconfig']

## Installer
[[plugins]]
repo = 'williamboman/mason.nvim'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/mason.lua'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['nvim-lspconfig', 'mason.nvim']

[[plugins]]
repo = 'tamago324/nlsp-settings.nvim'
lua_post_source = """
require('nlspsettings').setup({
  append_default_schemas = true,
  nvim_notify = { enable = true },
})
"""

[[plugins]]
repo = 'mfussenegger/nvim-jdtls'
lazy = true
on_lua = 'jdtls'

## DAP
[[plugins]]
repo = 'mfussenegger/nvim-dap'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/dap.lua'

[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
depends = ['nvim-dap', 'nvim-nio']

[[plugins]]
repo = 'nvim-neotest/nvim-nio'
lazy = true
on_lua = 'nio'

## tsserver integration
[[plugins]]
repo = 'pmizio/typescript-tools.nvim'
lua_post_source = """
require("typescript-tools").setup({
  root_dir = require('lspconfig').util.root_pattern('tsconfig.json', 'package.json'),
  single_file_support = false
})
"""

## efm-langserver presets
[[plugins]]
repo = 'creativenull/efmls-configs-nvim'

## Rust tooltip
[[plugins]]
repo = 'mrcjkb/rustaceanvim'
lua_add = """
vim.g.rustaceanvim = function()
  local config = {
    -- signature helpもかってにfocus持ってっちゃうんだよなあ……
    -- tools = { hover_actions = { auto_focus = true } },
  }

  local registry = require('mason-registry')
  if registry.is_installed('codelldb') then
    local pkg_dir = registry.get_package('codelldb'):get_install_path()
    config.dap = {
      adapter = require('rustaceanvim.config').get_codelldb_adapter(
        pkg_dir .. '/extension/adapter/codelldb',
        pkg_dir .. '/extension/lldb/lib/liblldb.so'
      ),
    }
  end
  return config
end
"""

## Flutter integration
[[plugins]]
repo = 'akinsho/flutter-tools.nvim'
lua_post_source = """
require('flutter-tools').setup({})
"""

# Popup
[[plugins]]
repo = 'Shougo/pum.vim'

# denops
[[plugins]]
repo = 'vim-denops/denops.vim'
lua_add = """
vim.g['denops#server#deno_args'] = { '-q', '--no-lock', '-A', '--unstable-kv' }
vim.api.nvim_create_user_command('DenopsFixCache', 'call denops#cache#update(#{reload: v:true})', {})
"""


[[plugins]]
repo = 'vim-denops/denops-shared-server.vim'
lua_add = """
vim.g.denops_server_addr = '127.0.0.1:32123'
vim.api.nvim_create_user_command('DenopsRestart', 'call denops_shared_server#restart()', {})
vim.api.nvim_create_user_command('DenopUninstall', 'call denops_shared_server#uninstall()', {})
"""
hook_done_update = """
call denops_shared_server#install()
"""

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = ['denops.vim']
hook_post_source = """
call popup_preview#enable()
"""

[[plugins]]
repo = 'matsui54/denops-signature_help'
depends = ['denops.vim']
lua_post_source = """
vim.g.signature_help_config = {
  contentsStyle = "currentLabel"
}
vim.fn['signature_help#enable']()
"""

## SKK
[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim']
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/skkeleton.lua'

[[plugins]]
repo = 'delphinus/skkeleton_indicator.nvim'
rev = 'v2'
lua_post_source = """
require('skkeleton_indicator').setup({
  eijiText = "a",
  hiraText = "あ",
  kataText = "ア",
  hankataText = "ｱ",
  zenkakuText = "Ａ"
})
"""

[[plugins]]
repo = 'skk-dev/dict'
merged = false

[[plugins]]
repo = 'uasi/skk-emoji-jisyo'

## ddc
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim']
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/ddc.lua'

### ui
[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = ['denops.vim', 'ddc.vim', 'pum.vim']

### source
[[plugins]]
repo = 'Shougo/ddc-source-lsp'
depends = ['denops.vim', 'ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-source-around'
depends = ['denops.vim', 'ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'

[[plugins]]
repo = 'Shougo/ddc-source-line'

[[plugins]]
repo = 'Shougo/ddc-source-input'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
depends = ['denops.vim', 'ddc.vim']

[[plugins]]
repo = 'tani/ddc-fuzzy'
depends = ['denops.vim', 'ddc.vim']

### filter
[[plugins]]
repo = 'Shougo/ddc-filter-sorter_rank'
depends = ['denops.vim', 'ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_head'
depends = ['denops.vim', 'ddc.vim']

## ddu
[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/ddu.lua'

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
depends = ['denops.vim', 'ddu.vim']

### UI
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
depends = ['denops.vim', 'ddu.vim']

### Matcher
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'mityu/ddu-filter-matcher_multi_regex'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-filter-converter_display_word'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-filter-sorter_alpha'
depends = ['denops.vim', 'ddu.vim']

### Sources
[[plugins]]
repo = 'Shougo/ddu-source-action'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'matsui54/ddu-source-help'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'matsui54/ddu-source-man'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = '4513ECHO/ddu-source-source'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-source-file'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'nabezokodaikon/ddu-source-file_fd'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'shun/ddu-source-buffer'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'shun/ddu-source-rg'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-source-register'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'

### Kinds
[[plugins]]
repo = 'Shougo/ddu-kind-file'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'Shougo/ddu-kind-word'
depends = ['denops.vim', 'ddu.vim']

### column
[[plugins]]
repo = 'Shougo/ddu-column-filename'
depends = ['denops.vim', 'ddu.vim']

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
depends = ['denops.vim', 'ddu.vim']

# filer
[[plugins]]
repo = 'lambdalisue/vim-fern'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/fern.lua'

[[plugins]]
repo = 'lambdalisue/vim-glyph-palette'

[[plugins]]
repo = 'lambdalisue/vim-fern-hijack'

[[plugins]]
repo = 'TheLeoP/fern-renderer-web-devicons.nvim'

# for good appearance
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# git
[[plugins]]
repo = 'tpope/vim-fugitive'
lua_add = """
vim.keymap.set('n', '<Leader>gl', '<Cmd>Git log -p %<CR>')
vim.keymap.set('n', '<Leader>gs', '<Cmd>Git<CR>')
"""

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
lua_post_source = """
require('gitsigns').setup({
  signcolumn = false,
  numhl = true,
  current_line_blame = true,
  current_line_blame_opts = {
      ignore_whitespace = true
  },
  on_attach = function()
    local gitsigns = require('gitsigns')

    vim.keymap.set('n', '<Leader>gb', gitsigns.blame, { buffer = true, desc = "Gitsigns: blame" })
    vim.keymap.set('n', '<Leader>gd', gitsigns.diffthis, { buffer = true, desc = "Gitsigns: diff" })
    vim.keymap.set('n', '<Leader>g[', function() gitsigns.nav_hunk('prev') end, { buffer = true, desc = "Gitsigns: jump to prev hunk" })
    vim.keymap.set('n', '<Leader>g]', function() gitsigns.nav_hunk('next') end, { buffer = true, desc = "Gitsigns: jump to next hunk" })
    vim.keymap.set('n', '<Leader>ga', gitsigns.stage_hunk, { buffer = true, desc = "Gitsigns: stage current hunk" })
    vim.keymap.set('v', '<Leader>ga', function() gitsigns.stage_hunk({vim.fn.line('.'), vim.fn.line('v')}) end, { buffer = true, desc = "Gitsigns: stage selected hunk" })
    vim.keymap.set('n', '<Leader>gA', gitsigns.stage_buffer, { buffer = true, desc = "Gitsigns: stage current buffer" })
    vim.keymap.set('n', '<Leader>gu', gitsigns.undo_stage_hunk, { buffer = true, desc = "Gitsigns: undo stage current hunk" })
    vim.keymap.set('n', '<Leader>gr', gitsigns.reset_hunk, { buffer = true, desc = "Gitsigns: reset current hunk" })
    vim.keymap.set('v', '<Leader>gr', function() gitsigns.reset_hunk({vim.fn.line('.'), vim.fn.line('v')}) end, { buffer = true, desc = "Gitsigns: reset selected hunk" })
    vim.keymap.set('n', '<Leader>gR', gitsigns.reset_buffer, { buffer = true, desc = "Gitsigns: reset current buffer" })
  end
})
"""

# parenthesis control
[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user']
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/surround.lua'

## dependency
[[plugins]]
repo = 'kana/vim-operator-user'

# autocomplete matching brace/quotation
[[plugins]]
repo = 'cohama/lexima.vim'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/lexima.lua'

# undo
[[plugins]]
repo = 'mbbill/undotree'
lua_add = """
vim.g.undotree_SetFocusWhenToggle = 1
vim.keymap.set('n', '<Leader>u', '<Cmd>UndotreeToggle<CR>')
"""

# statusline
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
depends = ['nvim-web-devicons']
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/lualine.lua'

[[plugins]]
repo = 'arkav/lualine-lsp-progress'
depends = ['lualine.nvim']

# comment
[[plugins]]
repo = 'numToStr/Comment.nvim'
lua_post_source = """
require('Comment').setup({
  ignore = '^$',
  mappings = {
    basic = false,
    extra = false
  },
  pre_hook = require('ts_context_commentstring.integrations.comment_nvim').create_pre_hook()
})
vim.keymap.set('n', '<C-_><C-_>', '<Plug>(comment_toggle_linewise_current)')
vim.keymap.set('v', '<C-_><C-_>', '<Plug>(comment_toggle_linewise_visual)')
vim.keymap.set('v', '<C-_>b', '<Plug>(comment_toggle_blockwise_visual)')
"""

## jsx/tsx helper
[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'

# helpの日本語化
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# Open README.md
[[plugins]]
repo = '4513ECHO/vim-readme-viewer'
hook_add = """
let g:readme_viewer#plugin_manager = 'dpp.vim'
"""

# ペースト時にpasteモードに
[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'alvan/vim-closetag'

# color scheme
[[plugins]]
repo = 'tomasr/molokai'
hook_add = """
colorscheme molokai
"""

# snippets
[[plugins]]
repo = 'uga-rosa/denippet.vim'
lua_post_source = """
for _, snip in ipairs(vim.fn.globpath(vim.fs.joinpath(vim.fn.stdpath('config'), 'mysnippets'), '*.*', true, true)) do
    vim.fn['denippet#load'](snip)
end
for _, snip in ipairs(vim.fn.globpath(vim.fs.joinpath(vim.fn['dpp#get']('friendly-snippets').path, 'snippets'), '**/*.json', true, true)) do
    vim.fn['denippet#load'](snip)
end
"""

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

# cursor
[[plugins]]
repo = 'rhysd/accelerated-jk'
lua_add = """
vim.keymap.set('n', 'j', '<Plug>(accelerated_jk_gj)')
vim.keymap.set('n', 'k', '<Plug>(accelerated_jk_gk)')
"""

[[plugins]]
repo = 'skanehira/jumpcursor.vim'
lua_add = """
vim.keymap.set('n', '<Leader>j', '<Plug>(jumpcursor-jump)')

local jumpcursor_marks = {}
for i = 0x61, 0x7a do table.insert(jumpcursor_marks, string.char(i)) end
for i = 0x41, 0x5a do table.insert(jumpcursor_marks, string.char(i)) end
for i = 0x21, 0x40 do table.insert(jumpcursor_marks, string.char(i)) end
for i = 0x5b, 0x60 do table.insert(jumpcursor_marks, string.char(i)) end
for i = 0x7b, 0x7e do table.insert(jumpcursor_marks, string.char(i)) end
vim.g.jumpcursor_marks = jumpcursor_marks
"""

[[plugins]]
repo = 'junegunn/vim-easy-align'
lua_add = """
vim.keymap.set({ 'n', 'v' }, '<Leader>a', '<Plug>(LiveEasyAlign)')
"""

[[plugins]]
repo = 'monaqa/dial.nvim'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/dial.lua'

# Highlight under cursor
[[plugins]]
repo = 'RRethy/vim-illuminate'
lua_post_source = """
require('illuminate').configure({
  filetype_overrides = {
    toml = { providers = { 'regex' } },
  },
})
"""

# indentation
[[plugins]]
repo = 'lambdalisue/vim-backslash'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'

[[plugins]]
repo = 'preservim/vim-indent-guides'

# markdown util
[[plugins]]
repo = 'mattn/vim-maketable'

# Syntax Highlighting
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_update = "TSUpdate"
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/treesitter.lua'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'

## color matching parenthesis
[[plugins]]
repo = 'hiphish/rainbow-delimiters.nvim'

## fish
[[plugins]]
repo = 'dag/vim-fish'

## .gitignore file
[[plugins]]
repo = 'benknoble/gitignore-vim'

## SATySFi
[[plugins]]
repo = 'qnighy/satysfi.vim'

## F#
[[plugins]]
repo = 'ionide/Ionide-vim'

## Brewfile
[[plugins]]
repo = 'bfontaine/Brewfile.vim'

## ebuild etc
[[plugins]]
repo = 'gentoo/gentoo-syntax'

## CoPL Derivation Language
[[plugins]]
repo = 'ymyzk/vim-copl'

## CSV (Rainbow and SQL-like query)
[[plugins]]
repo = 'mechatroner/rainbow_csv'
hooks_file = '$XDG_CONFIG_HOME/nvim/lua/xecua/plugins/rainbow_csv.lua'

## Firestore Security Rule
[[plugins]]
repo = 'delphinus/vim-firestore'

## skk-jisyo
[[plugins]]
repo = 'vim-skk/skkdict.vim'

## astro.build
[[plugins]]
repo = 'wuelnerdotexe/vim-astro'

[[plugins]]
repo = 'direnv/direnv.vim'

# Go utility
[[plugins]]
repo = 'fatih/vim-go'
lazy = true
on_ft = ['go']
lua_add = """
vim.g.go_doc_keywordprg_enabled = 0
"""

# Haxe
[[plugins]]
repo = 'jdonaldson/vaxe'
lazy = true
on_ft = ['haxe']

# Swift
[[plugins]]
repo = 'keith/swift.vim'
lazy = true
on_ft = ['swift']
