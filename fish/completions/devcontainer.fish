# fish completion for devcontainer
complete -c devcontainer -f

# Main command completions
complete -c devcontainer -n '__fish_is_first_arg' -a up -d 'Create and run dev container'
complete -c devcontainer -n '__fish_is_first_arg' -a set-up -d 'Set up an existing container as a dev container'
complete -c devcontainer -n '__fish_is_first_arg' -a build -d 'Build a dev container image'
complete -c devcontainer -n '__fish_is_first_arg' -a run-user-commands -d 'Run user commands'
complete -c devcontainer -n '__fish_is_first_arg' -a read-configuration -d 'Read configuration'
complete -c devcontainer -n '__fish_is_first_arg' -a outdated -d 'Show current and available versions'
complete -c devcontainer -n '__fish_is_first_arg' -a upgrade -d 'Upgrade lockfile'
complete -c devcontainer -n '__fish_is_first_arg' -a features -d 'Features commands'
complete -c devcontainer -n '__fish_is_first_arg' -a templates -d 'Templates commands'
complete -c devcontainer -n '__fish_is_first_arg' -a exec -d 'Execute a command on a running dev container'

# Options
complete -c devcontainer -s h -l help -d 'Show help'
complete -c devcontainer -l version -d 'Show version number'

# up command options
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l docker-path -rF -d 'Docker CLI path.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l docker-compose-path -rF -d 'Docker Compose CLI path.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l container-data-folder -xa '(__fish_complete_directories)' -d 'Container data folder where user data inside the container will be stored.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l container-system-data-folder -xa '(__fish_complete_directories)' -d 'Container system data folder where system data inside the container will be stored.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l workspace-folder -xa '(__fish_complete_directories)' -d 'Workspace folder path.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l workspace-mount-consistency -xa "consistent cached delegated" -d 'Workspace mount consistency.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l gpu-availability -xa "all detect none" -d 'Availability of GPUs.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l mount-workspace-git-root -d 'Mount the workspace using its Git root.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l id-label -x -d 'Id label(s) of the format name=value.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l config -rF -d 'devcontainer.json path.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l override-config -rF -d 'devcontainer.json path to override any devcontainer.json in the workspace folder.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l log-level -xa "info debug trace" -d 'Log level.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l log-format -xa "text json" -d 'Log format.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l terminal-columns -x -d 'Number of columns to render the output for.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l terminal-rows -x -d 'Number of rows to render the output for.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l default-user-env-probe -xa "none loginInteractiveShell interactiveShell loginShell" -d 'Default value for the devcontainer.json\'s "userEnvProbe".'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l update-remote-user-uid-default -xa "never on off" -d 'Default for updating the remote user\'s UID and GID.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l remove-existing-container -d 'Removes the dev container if it already exists.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l build-no-cache -d 'Builds the image with `--no-cache`.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l expect-existing-container -d 'Fail if the container does not exist.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l skip-post-create -d 'Do not run lifecycle commands.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l skip-non-blocking-commands -d 'Stop running user commands after running the command configured with waitFor.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l prebuild -d 'Stop after onCreateCommand and updateContentCommand.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l user-data-folder -xa '(__fish_complete_directories)' -d 'Host path to a directory that is intended to be persisted.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l mount -d 'Additional mount point(s).'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l remote-env -d 'Remote environment variables.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l cache-from -x -d 'Additional image to use as potential layer cache.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l cache-to -x -d 'Additional image to use as potential layer cache.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l buildkit -xa "auto never" -d 'Control whether BuildKit should be used.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l additional-features -d 'Additional features to apply.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l skip-post-attach -d 'Do not run postAttachCommand.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l dotfiles-repository -d 'URL of a dotfiles Git repository.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l dotfiles-install-command -d 'The command to run after cloning the dotfiles repository.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l dotfiles-target-path -d 'The path to clone the dotfiles repository to.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l container-session-data-folder -xa '(__fish_complete_directories)' -d 'Folder to cache CLI data.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l secrets-file -rF -d 'Path to a json file containing secret environment variables.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l include-configuration -d 'Include configuration in result.'
complete -c devcontainer -n '__fish_seen_subcommand_from up' -l include-merged-configuration -d 'Include merged configuration in result.'

# set-up command options
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l docker-path -rF -d 'Docker CLI path.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l container-data-folder -rF -d 'Container data folder.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l container-system-data-folder -xa '(__fish_complete_directories)' -d 'Container system data folder.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l container-id -x -d 'Id of the container.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l config -rF -d 'devcontainer.json path.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l log-level -xa "info debug trace" -d 'Log level.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l log-format -xa "text json" -d 'Log format.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l terminal-columns -x -d 'Number of columns to render the output for.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l terminal-rows -x -d 'Number of rows to render the output for.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l default-user-env-probe -xa "none loginInteractiveShell interactiveShell loginShell" -d 'Default value for the devcontainer.json\'s "userEnvProbe".'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l skip-post-create -d 'Do not run lifecycle commands.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l skip-non-blocking-commands -d 'Stop running user commands after running the command configured with waitFor.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l user-data-folder -xa '(__fish_complete_directories)' -d 'Host path to a directory that is intended to be persisted.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l dotfiles-target-path -xa '(__fish_complete_directories)' -d 'The path to clone the dotfiles repository to.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l container-session-data-folder -xa '(__fish_complete_directories)' -d 'Folder to cache CLI data.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l include-configuration -d 'Include configuration in result.'
complete -c devcontainer -n '__fish_seen_subcommand_from set-up' -l include-merged-configuration -d 'Include merged configuration in result.'

# build command options
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l user-data-folder -xa '(__fish_complete_directories)' -d 'Host path to a directory that is intended to be persisted.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l docker-path -rF -d 'Docker CLI path.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l docker-compose-path -rF -d 'Docker Compose CLI path.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l workspace-folder -xa '(__fish_complete_directories)' -d 'Workspace folder path.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l config -rF -d 'devcontainer.json path.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l log-level -xa "info debug trace" -d 'Log level.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l log-format -xa "text json" -d 'Log format.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l no-cache -d 'Builds the image with `--no-cache`.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l image-name -x -d 'Image name.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l cache-from -x -d 'Additional image to use as potential layer cache.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l cache-to -x -d 'A destination of buildx cache.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l buildkit -xa "auto never" -d 'Control whether BuildKit should be used.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l platform -x -d 'Set target platforms.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l push -d 'Push to a container registry.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l label -d 'Provide key and value configuration that adds metadata to an image.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l output -d 'Overrides the default behavior to load built images into the local docker registry.'
complete -c devcontainer -n '__fish_seen_subcommand_from build' -l additional-features -d 'Additional features to apply.'

# run-user-commands command options
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l user-data-folder -xa '(__fish_complete_directories)' -d 'Host path to a directory that is intended to be persisted.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l docker-path -rF -d 'Docker CLI path.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l docker-compose-path -rF -d 'Docker Compose CLI path.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l container-data-folder -xa '(__fish_complete_directories)' -d 'Container data folder.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l container-system-data-folder -xa '(__fish_complete_directories)' -d 'Container system data folder.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l workspace-folder -xa '(__fish_complete_directories)' -d 'Workspace folder path.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l mount-workspace-git-root -d 'Mount the workspace using its Git root.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l container-id -x -d 'Id of the container to run the user commands for.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l id-label -x -d 'Id label(s) of the format name=value.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l config -rF -d 'devcontainer.json path.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l override-config -rF -d 'devcontainer.json path to override any devcontainer.json in the workspace folder.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l log-level -xa "info debug trace" -d 'Log level.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l log-format -xa "text json" -d 'Log format.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l terminal-columns -x -d 'Number of columns to render the output for.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l terminal-rows -x -d 'Number of rows to render the output for.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l default-user-env-probe -xa "none loginInteractiveShell interactiveShell loginShell" -d 'Default value for the devcontainer.json\'s "userEnvProbe".'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l skip-non-blocking-commands -d 'Stop running user commands after running the command configured with waitFor.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l prebuild -d 'Stop after onCreateCommand and updateContentCommand.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l stop-for-personalization -d 'Stop for personalization.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l remote-env -d 'Remote environment variables.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l skip-post-attach -d 'Do not run postAttachCommand.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l dotfiles-repository -d 'URL of a dotfiles Git repository.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l dotfiles-install-command -d 'The command to run after cloning the dotfiles repository.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l dotfiles-target-path -xa '(__fish_complete_directories)' -d 'The path to clone the dotfiles repository to.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l container-session-data-folder -xa '(__fish_complete_directories)' -d 'Folder to cache CLI data.'
complete -c devcontainer -n '__fish_seen_subcommand_from run-user-commands' -l secrets-file -rF -d 'Path to a json file containing secret environment variables.'

# Features subcommands
complete -c devcontainer -n '__fish_seen_subcommand_from features' -a test -d 'Test Features'
complete -c devcontainer -n '__fish_seen_subcommand_from features' -a package -d 'Package Features'
complete -c devcontainer -n '__fish_seen_subcommand_from features' -a publish -d 'Package and publish Features'
complete -c devcontainer -n '__fish_seen_subcommand_from features' -a info -d 'Fetch metadata for a published Feature'
complete -c devcontainer -n '__fish_seen_subcommand_from features' -a resolve-dependencies -d 'Read and resolve dependency graph from a configuration'
complete -c devcontainer -n '__fish_seen_subcommand_from features' -a generate-docs -d 'Generate documentation'

# Templates subcommands
complete -c devcontainer -n '__fish_seen_subcommand_from templates' -a apply -d 'Apply a template to the project'
complete -c devcontainer -n '__fish_seen_subcommand_from templates' -a publish -d 'Package and publish templates'
complete -c devcontainer -n '__fish_seen_subcommand_from templates' -a metadata -d 'Fetch a published Template\'s metadata'
complete -c devcontainer -n '__fish_seen_subcommand_from templates' -a generate-docs -d 'Generate documentation'
